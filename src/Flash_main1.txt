#include <Arduino.h>
#include <Adafruit_SPIFlash.h>

#include "hardware_pins.h"

Adafruit_FlashTransport_QSPI flashTransport(QSPI_SCK, QSPI_CS, QSPI_D0,
                                   QSPI_D1, QSPI_D2, QSPI_D3);
Adafruit_SPIFlash Flash_QSPI(&flashTransport);

#define P PB08

void setup() {

  delay(3000);

  Serial.begin(115200);
  Serial.println("Iniciado.");

  pinMode(PB08, OUTPUT);

  // Inicializar el flash QSPI
  flashTransport.begin();
  if (flashTransport.supportQuadMode()) {
    Serial.println("Soporta QSPI");
  } else {
    Serial.println("No soporta QSPI");
  }
  
  while (Flash_QSPI.begin() == false) {
    Serial.println("Error al inicializar la memoria");
    delay(1000);  // Detener si falla la inicialización
  }
  if (Flash_QSPI.isReady()) {
    Serial.println("La mem flash Está lista");
    Serial.print("ID JEDEC de la memoria flash: 0x");
    Serial.println(Flash_QSPI.getJEDECID(), HEX);  // Mostrar el ID en formato hexadecimal
  }

  Serial.println("Memoria flash_QSPI inicializada correctamente");

  uint8_t data[] = {0xDE, 0xAD, 0xBE, 0xEF};  // Datos de ejemplo
  uint32_t address = 0x00;  // Dirección de la memoria para escribir (inicio)

  // Escribir datos en la memoria
  Flash_QSPI.eraseSector(address);  // Borrar antes de escribir
  if (Flash_QSPI.writeBuffer(address, data, sizeof(data))) {
    Serial.println("Datos escritos correctamente.");
  } else {
    Serial.println("Error al escribir en la memoria.");
  }

  // Leer los datos escritos para verificar
  uint8_t read_data[sizeof(data)];
  if (Flash_QSPI.readBuffer(address, read_data, sizeof(read_data))) {
    Serial.print("Datos leídos: ");
    for (uint8_t i = 0; i < sizeof(read_data); i++) {
      Serial.print("0x");
      Serial.print(read_data[i], HEX);
      Serial.print(" ");
    }
    Serial.println();
  } else {
    Serial.println("Error al leer de la memoria.");
  }
}

void loop() {  
  digitalWrite(PB08, LOW);
  delay(1000);
  digitalWrite(PB08, HIGH);
  delay(1000);
}



/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
#include <Arduino.h>
#include <Adafruit_SPIFlash.h>

#include "hardware_pins.h"

Adafruit_FlashTransport_QSPI flashTransport(QSPI_SCK, QSPI_CS, QSPI_D0, QSPI_D1, QSPI_D2, QSPI_D3);
Adafruit_SPIFlash Flash_QSPI(&flashTransport);

#define DEBUG_MODE

#define P PB08

#define MAX_ITERATIONS            10
#define SAVED_ADDRESS_SECTOR      4095                            /* Numero de sector utilzado para almacenar 4 bytes que indican la ultima posicion de memoria donde se escribieron los datos */
#define SAVED_ADDRESS_SECTOR_DIR  (SAVED_ADDRESS_SECTOR * 4096)   /* Direccion del sector utilzado para almacenar los 4 bytes que indican la ultima posicion de memoria donde se escribieron los datos */
#define PAGE_SIZE                 256                             /* De la memoria flash */ 
#define ADDRESS_SIZE              4                               /* Cada direccion de memoria tiene 4 bytes */
#define SECTOR_SIZE               4096
#define EXT_FLASH_SIZE            (16UL * 1024 * 1024)            /* 16 MB o 128 Mb */
#define LAST_PAGE_ADDR            (EXT_FLASH_SIZE - PAGE_SIZE)    /* Contiene la última posición escrita */

uint8_t get_address( uint32_t * write_address );
uint8_t start_flash(void);

void setup() {
  delay(3000);

  uint32_t new_write_address = 0;             /* Variable donde sera almacenada la direccion de memoria */
  uint8_t data[] = {0xDE, 0xAD, 0xBE, 0xEF};  /* Datos de ejemplo de escritura */
  uint32_t len_bytes = 0;                     /* Bytes escritos/leidos por/de la memoria FLASH */
  uint32_t read_data = 0;                     /* Valor de lectura de la memoria FLASH */
  uint8_t flash_status = 1;

  #ifdef DEBUG_MODE
  Serial.begin(115200);
  Serial.println("DEBUG (setup): Puerto serial iniciado.");
  #endif

  pinMode(PB08, OUTPUT);

  /* Inicializar el flash QSPI */
  /* TODO: error handling */
  flash_status = start_flash();
  if ( flash_status == 1 ) {
    #ifdef DEBUG_MODE
    Serial.println("Comunicar al OBC que el flash no anda.");
    #endif
  }

  /* Obtener la ultima posicion de datos */
  get_address(&new_write_address); /* No necesita error handling, se realiza en la funcion */  

  /* TODO: Comunicar al OBC */
  if (new_write_address >= EXT_FLASH_SIZE - PAGE_SIZE) {
    #ifdef DEBUG_MODE
    Serial.println("Sin espacio disponible");
    #endif
  }

  // Escritura de datos
  len_bytes = Flash_QSPI.writeBuffer(new_write_address, data, sizeof(data)); 
  if ( len_bytes == 0 ) {
    Serial.println("Error al escribir en la memoria.");
    /* TODO: return 1 en una funcion */
  }

  /* 
   * Se borra el sector donde es almacenada la ultima direccion de escritura
   * esto se debe a que no se permite la sobreescritura de datos, y solamente esta habilitado
   * borrar datos por sectores
   */
  Flash_QSPI.eraseSector(SAVED_ADDRESS_SECTOR);

  /* Se actualiza la dirección con la cantidad de bytes escritos */
  new_write_address += len_bytes;
  len_bytes = Flash_QSPI.writeBuffer(SAVED_ADDRESS_SECTOR_DIR, (uint8_t*)&new_write_address, sizeof(new_write_address));
  if (len_bytes == 0) {
    Serial.println("Error al guardar direccion en la memoria.");
    /* TODO: retornar error en una funcion */
  }
  #ifdef DEBUG_MODE
  Serial.print("DEBUG: Dirección a almacenar: 0x");
  Serial.println(new_write_address, HEX);
  #endif

  /* DEBUG: Leer los datos hasta donde fueron escritos */
  Serial.print("Leyendo los datos escritos: ");
  for (uint32_t address = 0x00; address < new_write_address; address++) {
    // Variable para almacenar el dato leído
    uint8_t read_byte;
    if (Flash_QSPI.readBuffer(address, &read_byte, 1)) {
      Serial.print("0x");
      Serial.print(read_byte, HEX);
      Serial.print(" ");
    } else {
      Serial.println("Error al leer de la memoria.");
    }
  }
  Serial.println();

  read_data = 0;
  len_bytes = Flash_QSPI.readBuffer(SAVED_ADDRESS_SECTOR_DIR, (uint8_t *)&read_data, ADDRESS_SIZE);
  if (len_bytes == 0) {
    Serial.print("Error leyendo de la memoria FLASH");
    /* TODO: retornar error en una funcion */
  }
  #ifdef DEBUG_MODE
  Serial.print("DEBUG: Dirección almacenada: 0x");
  Serial.println(read_data, HEX);
  #endif

  Serial.println();
}

void loop() {  
  digitalWrite(PB08, LOW);
  delay(1000);
  digitalWrite(PB08, HIGH);
  delay(1000);
}

/**
 * @fn      get_address 
 * @brief   Retorna la ultima direccion donde existen datos
 * @param   write_address - Variable donde sera almacenada la direccion resultante
 * @return  0 sin error
 *          1 error en lectura
 */
uint8_t get_address( uint32_t * write_address ) {
  uint32_t len_bytes = 0;                     /* Bytes escritos/leidos por/de la memoria FLASH */
  uint32_t last_write_address = 0;            /* Variable donde sera almacenada la direccion de memoria */

  /* Se leen 4 bytes empezando en la direccion del sector reservado para almacenar la ultima direccion de memoria */  
  len_bytes = Flash_QSPI.readBuffer(SAVED_ADDRESS_SECTOR_DIR, (uint8_t*)write_address, ADDRESS_SIZE);
  #ifdef DEBUG_MODE
  Serial.print("DEBUG (get_address): Ultima direccion: 0x");
  Serial.println(*write_address, HEX);
  #endif
  /* Si existe un error en la lectura */  
  if (len_bytes == 0 ) {
    #ifdef DEBUG_MODE
    Serial.println("ERROR (get_address): Error en la lectura de la memoria FLASH.");
    #endif
    *write_address = 0x00000000;
    return 1;
  }

  /* Si la ultima direccion es NULL, se inicia desde la posicion 0 de la memoria FLASH */
  if (last_write_address == 0xFFFFFFFF) {
    *write_address = 0x00000000;
    #ifdef DEBUG_MODE
    Serial.println("DEBUG (get_address): Iniciando escritura en la direccion 0.");
    #endif
  }

  /* Retornar si no ocurren errores */
  return 0;
}

/**
 * @fn      start_flash
 * @brief   Inicia la memoria Flash
 * @param   none 
 * @return  0 sin error
 *          1 error al iniciar FLASH
 */
uint8_t start_flash(void)
{
  uint8_t iter_counter = 0;   /* Contador de iteraciones */

  flashTransport.begin();

  #ifdef DEBUG_MODE
  if (flashTransport.supportQuadMode()) {
    Serial.println("DEBUG (start_flash): La memoria Flash soporta QSPI.");
  }
  else {
    Serial.println("DEBUG (start_flash): La memoria Flash no soporta QSPI.");
  }
  #endif

  /* Intentar iniciar FLASH QSPI */
  for ( iter_counter = 0; iter_counter <= MAX_ITERATIONS ; iter_counter ++) {
    /* Verificar si el FLASH QSPI ya inicio */
    if ( Flash_QSPI.begin() == true ) {
      #ifdef DEBUG_MODE
      Serial.println("DEBUG (start_flash): Memoria flash iniciada correctamente.");

      if (Flash_QSPI.isReady()) {
        Serial.println("La mem flash Está lista");
        Serial.print("ID JEDEC de la memoria flash: 0x");
        Serial.println(Flash_QSPI.getJEDECID(), HEX);  
      }
      Serial.println("Memoria flash_QSPI inicializada correctamente");
      #endif
      return 0;
    }

    #ifdef DEBUG_MODE
    Serial.println("ERROR (start_flash): Error al inicializar la memoria Flash.");
    #endif
    delay(1000);

  }

  /* Si no se pudo iniciar en el numero maximo de intentos */
  #ifdef DEBUG_MODE
  Serial.println("ERROR (start_flash): No se pudo iniciar la memoria Flash.");
  #endif
  return 1;
}